#pragma kernel CSMain
#include "Assets/Sensors/Cameras/Lidar/LidarOutputs/Shaders/Resources/Output.cginc"
//#include "Packages/com.unity.simviz/Sensors/Cameras/Lidar/LidarOutputs/Shaders/Resources/Output.cginc"

RWStructuredBuffer<float4> Result;

float3 polarToCartesian(float azDeg, float elevDeg, float r)
{
    if(r == 0)
        return float3(0, 0, 0);

    float elevRad = radians(elevDeg);
    float azRad = radians(azDeg);

    float x = sin(azRad) * cos(elevRad);
    float y = sin(elevRad);
    float z = cos(azRad) * cos(elevRad);

    return float3(x * r, y * r, z * r);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_GroupID)
{
    float4 polar = calculatePolar(id);
    float3 cartesian = polarToCartesian(polar.x, polar.y, polar.z);
    float4 value = float4(cartesian, polar.w);

    if (polar.z != 0) // to avoid race condition error
        Result[getIndex(id)] = value;
}
